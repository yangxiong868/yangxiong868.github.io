<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[Linux基础]rpm和yum常用命令]]></title>
    <url>%2F2017%2F10%2F06%2FLinux%E5%9F%BA%E7%A1%80-rpm%E5%92%8Cyum%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[rpm常用命令安装一个rpm包rpm -ivh file.rpm 参数说明：-i ：安装的意思-v ：可视化-h ：显示安装进度另外在安装一个rpm包时常用的附带参数有：–force 强制安装，即使覆盖属于其他包的文件也要安装–nodeps 当要安装的rpm包依赖其他包时，即使其他包没有安装，也要安装这个包 查看包依赖关系rpm -qpR file.rpm 卸载一个rpm包rpm -e file.rpm 查找是否已经安装了某个包rpm -qa | grep htop 查看安装的软件包安装了哪些文件rpm -ql htop 想知道本地文件来自那个软件包rpm -qf /usr/bin/htop rpm包下载网址： https://pkgs.org/ http://rpm.pbone.net https://rpmfind.net/ 参考链接：http://achuan.blog.51cto.com/102/60869 yum常用命令从 repo 中查找某个软件包yum search htop 查看yum安装源中包的版本信息yum info htop 从 repo 中查找哪个包提供了哪个文件yum provides /usr/bin/htop 安装软件包的最新或指定版本yum install [-y] htopyum install [-y] htop-2.0.1-1.el7 查看软件包所有可用的版本yum –showduplicate list htop 卸载软件包yum remove [-y] htop 升级软件包yum update [-y] htop 降级软件包到指定版本（软件包的新版本已经安装）yum downgrade htop-2.0.0-2.el7 删除 yum cacheyum clean all]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>rpm</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[C/C++]时间结构体与获取函数]]></title>
    <url>%2F2017%2F10%2F06%2FC-C-%E6%97%B6%E9%97%B4%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%8E%B7%E5%8F%96%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[时间结构体C/C++中常用的时间结构体有三种：time_t、struct tm、struct timeval。 time_t时间值time_t时间值在time.h中定义如下：1234#ifndef __TIME_T #define __TIME_T typedef long time_t; #endif time_t是一个long型，表示从UTC时间(1970年1月1日00时00分00秒)到当前系统时刻的秒数。使用time()函数可以获取当前系统时间time_t的值。 struct tm时间结构体由于time_t以秒为单位表示可读性差，所以需要一个可以表示当前系统时间（年、月、日、时、分、秒）方式的数据结构struct tm。struct tm结构体也在time.h中定义如下：123456789101112struct tm &#123; int tm_sec; /* 秒,取值范围(0~59)，但当遇到闰秒时则会有60秒的取值。 */ int tm_min; /* 分钟数，取值范围(0-59) */ int tm_hour; /* 小时数，取值范围(0-23) */ int tm_mday; /* 当天在这个月中是第几天，取值范围(1-31) */ int tm_mon; /* 当前月份是第几个月，取值范围(0-11) */ int tm_year; /* 从1900年开始至今的年数，即(Year - 1900)的值 */ int tm_wday; /* 当天在本周是第几天，取值范围(0-6, Sunday = 0) */ int tm_yday; /* 当天在今年是第几天，取值范围(0-365, 1 Jan = 0) */ int tm_isdst; /* 夏令时标记，值大于0表示夏令时生效；等于0表示夏令时失效；小于0表示数据不可用。 */ char *tm_zone; /* 时区名称，根据系统不同可能不被声明或不同全名。 */&#125;; 使用localtime()和gmtime()函数可以把time_t时间值转换成struct tm。 struct timeval结构体由于time_t只能表示秒级时间粒度，而struct timeval结构体可以表示微秒级，其中tv_sec表示当前系统时刻的秒数，tv_usec表示当前系统时刻的微秒数，1秒 = 1000000微秒。struct timeval结构体在time.h中定义如下：1234567/* A time value that is accurate to the nearest microsecond but also has a range of years. */struct timeval&#123; __time_t tv_sec; /* Seconds. */ __suseconds_t tv_usec; /* Microseconds. */&#125;; 使用gettimeofday()函数获取当前系统时间struct timeval结构体的值。 时间获取函数主要介绍四个常用的时间获取函数：time()、gmtime()、localtime()、gettimeofday()。 time()函数头文件：#include &lt;time.h&gt;函数定义：time_t time (time_t *t)功能描述：该函数返回从UTC时间(1970年1月1日00时00分00秒)到当前系统所经过的秒数。返回值：成功则返回秒数，失败则返回((time_t)-1)值，错误原因存于errno中。 gmtime()函数头文件：#include &lt;time.h&gt;函数定义：struct tm *gmtime(time_t const *timep)功能描述：该函数将参数timep指向的time_t时间值转换成以tm结构体表示的世界标准时间UTC。返回值：返回结构体tm代表目前UTC 时间。 localtime()函数头文件：#include &lt;time.h&gt;函数定义：struct tm *localtime(time_t const *timep)功能描述：该函数将参数timep指向的time_t时间值转换成以tm结构体表示的本地时间（如北京时间）。返回值：返回结构体tm代表目前UTC 时间。 说明：以北京时间为例，gmtime()得到的结果比localtime()要提前(早)8小时。 gettimeofday()函数头文件：#include &lt;time.h&gt;函数定义：int gettimeofday (struct timeval *__restrict __tv, __timezone_ptr_t __tz)功能描述：该函数把当前的时间信息存入tv指向的结构体中，把当前时区信息存入tz指向的结构体中，如果tz为NULL则不向tz写入。返回值：成功则返回0，失败则返回-1值，错误原因存于errno中。 时间格式化字符串时间格式化字符串三个常用的函数有： ctime()、asctime()、strftime()、strptime()。 ctime()函数头文件：#include &lt;time.h&gt;函数定义：char *ctime(const time_t *timep)功能描述：将参数timep时间值转换成实际使用的时间日期表示方法。返回值：以字符串形式返回。字符串格式为：”Wed Jun 20 21:00:00 2012\n”。 asctime()函数头文件：#include &lt;time.h&gt;函数定义：char *asctime(const struct tm *tm)功能描述：将参数tm结构体转换成实际使用的时间日期表示方法。返回值：以字符串形式返回。字符串格式为：”Wed Jun 20 21:00:00 2012\n”。 说明：ctime()和asctime()的区别是函数的入参不同，返回的字符串格式化相同。 strftime()函数头文件：#include &lt;time.h&gt;函数定义：size_t strftime(char *s, size_t max, const char *format, const struct tm *tm)功能描述：格式化时间字符串，可以根据format指向字符串中格式命令把tm中保存的时间信息放在s指向的字符串中，最多向s中存放max个字符。返回值：向s指向的字符串中放置的字符数。 strftime()函数的操作有些类似于sprintf()：识别以百分号(%)开始的格式命令集合，格式化输出结果放在一个字符串中。下面仅挑几个常用的来说： 格式化参数 含义 %Y 完整的年数字 %m 月份，如月份是1~9,则数字前填充一个’0’ %d 日子 %F 等同于“%Y-%m-%d” %H 小时数 %M 分钟数 %S 秒数 %_m 月份，如果月份是1~9，则数字前有一个空格填充 %-m 月份，如果月份是1~9，仍只显示该数字 strptime()函数头文件：#include &lt;time.h&gt;函数定义：char *strptime(const char *s, const char *format, struct tm *tm)功能描述：将一个字符串格式化为一个tm结构，功能与strftime相反，根据format指向字符串中格式命令把s指向的字符串转换存储到tm中。返回值：指向转换过程处理的最后一个字符后面的那个字符。 时间代码示例运用上述介绍的结构体和函数编写的C语言代码如下：12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;time.h&gt;#include &lt;sys/time.h&gt;int main(int argc, char *argv[])&#123; time_t calendar_time; struct tm *tm_local; struct timeval start,end; long dif_sec, dif_usec, j; time(&amp;calendar_time); //calendar_time = time(NULL); printf("calendar_time: %ld\n", calendar_time); tm_local = localtime(&amp;calendar_time); printf("\nlocaltime :year=%d mon=%d mday=%d hour=%d min=%d sec=%d\n",tm_local-&gt;tm_year + 1900, tm_local-&gt;tm_mon + 1, tm_local-&gt;tm_mday, tm_local-&gt;tm_hour, tm_local-&gt;tm_min, tm_local-&gt;tm_sec); printf("asctime: %s\n", asctime(tm_local)); printf("ctime: %s\n", ctime(&amp;calendar_time)); char strtime[128]; strftime(strtime, sizeof(strtime), "%Y-%m-%d %H-%M-%S", tm_local); printf("localtime format: %s\n", strtime); //下面代码可以计算程序部分代码执行的时间(微秒) gettimeofday(&amp;start, NULL); for(int i = 0; i &lt; 10000000; ++i) j = 3.14 * i + 6.28 * i + 0.001 * i; gettimeofday(&amp;end, NULL); dif_sec = end.tv_sec - start.tv_sec; dif_usec = end.tv_usec - start.tv_usec; printf("running time is %ld sec (%ld usec)\n", dif_sec, dif_sec*1000000 + dif_usec); return 0;&#125; 程序运行结果如下：12345678910calendar_time: 1482079700localtime :year=2016 mon=12 mday=18 hour=8 min=48 sec=20asctime: Sun Dec 18 08:48:20 2016ctime: Sun Dec 18 08:48:20 2016localtime format: 2016-12-18 08-48-20running time is 0 sec (97651 usec) 运用strftime和strptime函数编写的C语言代码如下：1234567891011121314151617#include "stdio.h" int main(void) &#123; time_t lt = time(NULL); struct tm* ptr = localtime(&amp;lt); char szBuffer[64] = &#123;0&#125;; const char* pFormat = "The time now is %Y-%m-%d %H:%M:%S"; strftime(szBuffer, 64, pFormat, ptr); printf("%s\n", szBuffer); struct tm tmTemp; char tmBuffer[64] = &#123;0&#125;; strptime(szBuffer, pFormat, &amp;tmTemp);//字符串转换成struct tm结构体 strftime(tmBuffer, 64, "The time just was %Y-%m-%d %H:%M:%S", &amp;tmTemp); printf("%s\n", tmBuffer); return 0; &#125; 程序运行结果如下：12The time now is 2016-12-19 10:39:24The time just was 2016-12-19 10:39:24 参考链接： http://sodino.com/2015/03/15/c-time/ http://blog.csdn.net/yasaken/article/details/7429506]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Linux系统编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos安装vim教程]]></title>
    <url>%2F2017%2F10%2F06%2Fcentos%E5%AE%89%E8%A3%85vim%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[yum安装Vim1.先卸载老的vim1yum remove vim-* -y 2.下载第三方yum源1wget -P /etc/yum.repos.d/ https://copr.fedorainfracloud.org/coprs/mcepl/vim8/repo/epel-7/mcepl-vim8-epel-7.repo 3.安装vim1yum -y install vim-enhanced sudo 4.验证vim版本12345rpm -qa |grep vimvim-enhanced-8.0.0704-1.1.26.el7.centos.x86_64vim-common-8.0.0704-1.1.26.el7.centos.x86_64vim-minimal-8.0.0704-1.1.26.el7.centos.x86_64vim-filesystem-8.0.0704-1.1.26.el7.centos.x86_64 安装过程遇到的依赖问题“libc.so.6 is needed by XXX”解决方法参考：http://www.cnblogs.com/think3t/p/4165102.html rpm包安装Vim1.Vim安装需要的四个rpm包如下：1234vim-filesystem-7.4.629-5.el6_8.1.x86_64.rpmvim-common-7.4.629-5.el6_8.1.x86_64.rpmvim-enhanced-7.4.629-5.el6_8.1.x86_64.rpm vim-minimal-7.4.629-5.el6_8.1.x86_64.rpm 2.登录rpmfind网站，下载vim的rpm包，注：centos只有7.4版本vim包 vim有四个包，下面是按照顺序 3.使用rpm命令安装Vim包，按照1中的顺序依次安装。1rpm -ivh 包名 4.查看vim版本号1vim --version | head 源码安装Vim1.安装依赖1yum -y install ruby perl-devel python-devel ruby-devel perl-ExtUtils-Embed ncurses-devel 2.源码下载源码下载方法一：克隆源码12git clone https://github.com/vim/vim.gitcd vim/ 源码下载方法二：下载压缩包1234wget https://github.com/vim/vim/archive/master.zipunzip master.zipcd vim-mastercd src/ 3.源码编译1234./configure --prefix=/usr/local --enable-multibyte --with-tlib=tinfo --enable-pythoninterp --enable-rubyinterp \--with-ruby-command=/usr/bin/ruby --with-features=hugemakemake install 4.查看vim版本号1vim --version | head]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F10%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
